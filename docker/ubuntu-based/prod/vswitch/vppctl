#!/bin/bash

# Find the most recent container running vpp, and execute the vpp cli that resides within.

set -euo pipefail

get_vswitch_container_id() {
    # There may be more than one vswitch container if an upgrade/redeploy is
    # happening, so go for the newest one.
    docker ps --format '{{.CreatedAt}} {{.Image}} {{.ID}}' | grep -E " $1@?[^ ]* [^ ]+$" | sort -nr | \
        head -n 1 | sed -e 's|.* ||g'
}

IMAGE="contivvpp/vswitch"

# Test and see if we need more access.
if ! docker info >/dev/null 2>&1
then
    echo "Error connecting to the Docker daemon.  Please try rerunning with sudo." >&2
    exit 1
fi

# In K8s 1.10 only Image IDs are displayed by 'docker ps' instead of Image
# names. If we can't get the vswitch container by its name, try using Image
# ID, which we get from listing docker images and looking for the latest
# vswitch image.
IFS=$'\n'
if ! ID=$(get_vswitch_container_id "$IMAGE") || [ -z "$ID" ]
then
    # Just grab the latest (by date) image for now. Will have to be replaced
    # later with grabbing an image with a specific tag.
    IMG=$(docker images --format '{{.CreatedAt}};{{.ID}};{{.Repository}}' | grep "$IMAGE" | sort -nr)
    IMG_FOUND=""
    for line in ${IMG}
    do
	if [ $(cut -d";" -f3 <<<${line}) = ${IMAGE} ]
	then
            IMG_FOUND=$(cut -d";" -f3 <<<${line})
	    IMG=${line}
	    break
        fi
    done

    if [ -n ${IMG_FOUND} ]
    then
	cID=$(cut -d";" -f2 <<<${IMG})
	if ! ID=$(get_vswitch_container_id "${cID}" ) || [ -z "$ID" ]
        then
            echo "Error finding a running container derived from the $IMAGE image." >&2
            exit 1
        fi
    else
        echo "Error finding a $IMAGE image." >&2
        exit 1
    fi
fi

DOCKER_ARGS=
if [ -t 0 ]
then
    DOCKER_ARGS="-t"
fi

# Docker args can't be quoted here because otherwise when there are no args, docker would get an argument that is an
# empty string (causing it to error), instead of no arg at all.
exec docker exec -i $DOCKER_ARGS "$ID" /usr/bin/vppctl "$@"
